"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _parseColor2 = _interopRequireDefault(require("parse-color"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

/**
 * Calculate relative luminance.
 *
 * Use relative luminance definition from W3C
 * https://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef
 * @param color string any color string
 * @param args object optional arguments: ignoreTransparency (default: false)
 */
var getRelativeLuminance = function getRelativeLuminance(color) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$ignoreTransparen = _ref.ignoreTransparency,
      ignoreTransparency = _ref$ignoreTransparen === void 0 ? false : _ref$ignoreTransparen;

  if (!color) {
    throw new TypeError('getRelativeLuminance() needs you to pass the color parameter.'); // return 0;
  }

  var _parseColor = (0, _parseColor2["default"])(color),
      _parseColor$rgba = _slicedToArray(_parseColor.rgba, 4),
      r = _parseColor$rgba[0],
      g = _parseColor$rgba[1],
      b = _parseColor$rgba[2],
      a = _parseColor$rgba[3]; // @TODO: account for alpha values (rgba etc)
  // Lea Verou has a good looking approach:
  // https://github.com/LeaVerou/contrast-ratio


  if (a < 1 && !ignoreTransparency) {
    throw new TypeError('getRelativeLuminance() does not now how to handle transparency.');
  }

  var srgb = [r, g, b].map(function (value) {
    return value / 255;
  });

  var _srgb$map = srgb.map(function (value) {
    return value <= 0.03928 ? value / 12.92 : Math.pow((value + 0.055) / 1.055, 2.4);
  }),
      _srgb$map2 = _slicedToArray(_srgb$map, 3),
      R = _srgb$map2[0],
      G = _srgb$map2[1],
      B = _srgb$map2[2];

  var L = 0.2126 * R + 0.7152 * G + 0.0722 * B;
  return L;
};

var _default = getRelativeLuminance;
exports["default"] = _default;